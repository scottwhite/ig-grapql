// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"fmt"
	"io"
	"strconv"
)

type Collector struct {
	ID             string  `json:"id"`
	Name           string  `json:"name"`
	Description    *string `json:"description"`
	IPAddres       string  `json:"ipAddres"`
	Port           int     `json:"port"`
	OrganizationID string  `json:"organizationId"`
	Fingerprint    string  `json:"fingerprint"`
	LastPinged     *string `json:"lastPinged"`
	ConductorID    *string `json:"conductorId"`
}

type NewCi struct {
	Name    string `json:"name"`
	IsCloud bool   `json:"isCloud"`
	CiClass string `json:"ciClass"`
}

type Os struct {
	ID             string `json:"id"`
	Name           string `json:"name"`
	ManufacturerID string `json:"manufacturerId"`
}

type OSVersion struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Version string `json:"version"`
	Os      *Os    `json:"os"`
}

type CiClass string

const (
	CiClassServer      CiClass = "Server"
	CiClassFile        CiClass = "File"
	CiClassApplication CiClass = "Application"
	CiClassNetwork     CiClass = "Network"
	CiClassStorage     CiClass = "Storage"
	CiClassSecurity    CiClass = "Security"
)

var AllCiClass = []CiClass{
	CiClassServer,
	CiClassFile,
	CiClassApplication,
	CiClassNetwork,
	CiClassStorage,
	CiClassSecurity,
}

func (e CiClass) IsValid() bool {
	switch e {
	case CiClassServer, CiClassFile, CiClassApplication, CiClassNetwork, CiClassStorage, CiClassSecurity:
		return true
	}
	return false
}

func (e CiClass) String() string {
	return string(e)
}

func (e *CiClass) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CiClass(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CiClass", str)
	}
	return nil
}

func (e CiClass) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
